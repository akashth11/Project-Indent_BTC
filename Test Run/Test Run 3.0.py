import json
from collections import defaultdict

def load_json(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        return json.load(file)

def generate_indent_payload(order_data, supplier_data, supplier_items):
    if isinstance(order_data, list):  # Handle if order_data is a list
        order_data = order_data[0] if order_data else {}  # Use first element if not empty
    
    if not isinstance(order_data, dict):  
        raise ValueError("Error: Expected order_data to be a dictionary, but got a list.")
    
    # Step 1: Create supplier lookup dictionary using ConcatSUPPLIER
    supplier_lookup = {s["ConcatSUPPLIER"]: s for s in supplier_data}
    
    # Step 2: Aggregate order quantities per SKU
    aggregated_orders = defaultdict(lambda: {"quantity": 0, "branch_name": "", "branch_code": "", "supplier_code": ""})
    
    for branch_code, order_info in order_data.items():
        for order in order_info["data"]:
            key = order["ConcatNMBLPY"]
            
            if key in supplier_lookup:
                supplier = supplier_lookup[key]
                
                sku = order["SUPPLIER SKU"]
                aggregated_orders[(sku, supplier["Supplier Code"])]["quantity"] += order["QUANTITY"]
                aggregated_orders[(sku, supplier["Supplier Code"])]["branch_name"] = order["BRANCH NAME"]
                aggregated_orders[(sku, supplier["Supplier Code"])]["branch_code"] = branch_code
                aggregated_orders[(sku, supplier["Supplier Code"])]["supplier_code"] = supplier["Supplier Code"]
    
    # Step 3: Match with supplier item details
    final_items = []
    sku_lookup = {(item["skuCode"], item["supplierCode"]): item for item in supplier_items}
    
    for (sku, supplier_code), details in aggregated_orders.items():
        item_name = "Unknown Item"
        measuring_unit = "No"
        
        if (sku, supplier_code) in sku_lookup:
            item = sku_lookup[(sku, supplier_code)]
            item_name = item.get("name", "Unknown Item")
            measuring_unit = item.get("measuringUnit", "No")
        
        final_items.append({
            "skuCode": sku,
            "itemName": item_name,
            "measuringUnit": measuring_unit,
            "quantity": details["quantity"]
        })
    
    # Step 4: Construct the indent payload
    if not final_items:
        return "No valid items to order."
    
    indent_payload = {
        "branchCode": aggregated_orders[(sku, supplier_code)]["branch_code"],
        "branchName": aggregated_orders[(sku, supplier_code)]["branch_name"],
        "supplierCode": aggregated_orders[(sku, supplier_code)]["supplier_code"],
        "items": final_items,
        "status": "Draft",
        "label": ["Auto-generated Indent"],
        "sourceInfo": {"sourceIndentOrder": "Automated Order"},
        "deliveryDate": "2025-04-04",
        "notes": "Generated by script."
    }
    
    return json.dumps(indent_payload, indent=4)

# Load JSON files
order_data = load_json("Nymbl Order Data/order_data_2025-04-02.json")
supplier_data = load_json("transformed_suppliers.json")
supplier_items = load_json("supplier_items.json")

indent_payload = generate_indent_payload(order_data, supplier_data, supplier_items)
print(indent_payload)