import json
import csv
from collections import defaultdict

# Load Order Data (Inside Folder)
with open("Nymbl Order Data/order_data_2025-04-02.json", "r", encoding="utf-8") as file:
    order_data = json.load(file)

# Load Supplier Items Data (Root Directory)
with open("supplier_items.json", "r", encoding="utf-8") as file:
    supplier_items = json.load(file)

# Load Supplier Mapping Data
with open("transformed_suppliers.json", "r", encoding="utf-8") as file:
    supplier_mapping = json.load(file)

# Convert supplier_items.json into a dictionary for fast lookup using both SKU and Supplier Code
supplier_lookup = {(str(item["skuCode"]), item["supplierCode"]): item for item in supplier_items}

# Convert supplier_mapping.json into a dictionary for supplier mapping based on ConcatSUPPLIER, filtering only active suppliers
supplier_code_mapping = {item["ConcatSUPPLIER"]: item["Supplier Code"] for item in supplier_mapping if item["Status"] == "Active"}

# Ensure the data is a list and extract all buyer store orders
buyer_supplier_orders = defaultdict(lambda: defaultdict(list))

for buyer_data in order_data:
    for branch_code, branch_info in buyer_data.items():
        if "data" not in branch_info:
            continue  # Skip if no order data is present

        for order in branch_info["data"]:
            concat_supplier_key = order["ConcatNMBLPY"]
            mapped_supplier_code = supplier_code_mapping.get(concat_supplier_key, None)  # Map supplier code based on ConcatSUPPLIER
            if mapped_supplier_code:  # Only process if supplier is active
                buyer_supplier_orders[branch_code][mapped_supplier_code].append(order)

# Generate Indent Payloads in required JSON format
indent_payloads = []

for branch_code, suppliers in buyer_supplier_orders.items():
    for supplier_code, items in suppliers.items():
        indent_payload = {
            "branchCode": branch_code,
            "branchName": items[0]["BRANCH NAME"],
            "supplierCode": supplier_code,
            "items": [],
            "status": "Draft",
            "sourceInfo": {
                "sourceIndentOrder": "Automated Order"
            },
            "deliveryDate": items[0]["DELIVERY DATE"],
            "notes": "Generated by script."
        }

        for item in items:
            sku_code = str(item["SUPPLIER SKU"])  # Ensure it's a string
            lookup_key = (sku_code, supplier_code)  # Match on both SKU and Supplier Code
            item_details = supplier_lookup.get(lookup_key, {})

            indent_payload["items"].append({
                "skuCode": sku_code,
                "itemName": item_details.get("name", item["ITEM NAME"]),  # Lookup name, fallback to order data
                "measuringUnit": item_details.get("measuringUnit", item["MEASURING UNIT"]),  # Lookup unit
                "quantity": item["QUANTITY"]
            })

        indent_payloads.append(indent_payload)

# Save to JSON in the required format
json_filename = "indent_payloads.json"
with open(json_filename, "w", encoding="utf-8") as jsonfile:
    json.dump(indent_payloads, jsonfile, indent=4, ensure_ascii=False)

print(f"JSON file '{json_filename}' generated successfully with {len(indent_payloads)} payloads!")
