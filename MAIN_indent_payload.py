import json
import csv
from collections import defaultdict
from datetime import datetime
import subprocess
import os

# Run dependencies
subprocess.run(["python", "IMPORT_nymblup.py"], check=True)
subprocess.run(["python", "Supplier_Details.py"], check=True)
subprocess.run(["python", "inventorysupplieritemlist.py"], check=True)

# Get current date
current_date = datetime.now().strftime("%Y-%m-%d")

# Define folders
order_data_filename = f"Nymbl Order Data/order_data_{current_date}.json"
indent_folder = "Indent Payload Log"
indent_csv_folder = "Indent CSV"

# Ensure folders exist
os.makedirs(indent_folder, exist_ok=True)
os.makedirs(indent_csv_folder, exist_ok=True)

# Load data
with open(order_data_filename, "r", encoding="utf-8") as f:
    order_data = json.load(f)

with open("supplier_items.json", "r", encoding="utf-8") as f:
    supplier_items = json.load(f)

with open("transformed_suppliers.json", "r", encoding="utf-8") as f:
    supplier_mapping = json.load(f)

# Prepare lookups
supplier_lookup = {(str(item["skuCode"]), item["supplierCode"]): item for item in supplier_items}
supplier_code_mapping = {
    item["ConcatSUPPLIER"]: item["Supplier Code"]
    for item in supplier_mapping
    if item["Status"] == "Active"
}

# Group by buyer, supplier
buyer_supplier_orders = defaultdict(lambda: defaultdict(list))

for buyer_data in order_data:
    for branch_code, branch_info in buyer_data.items():
        if "data" not in branch_info:
            continue
        for order in branch_info["data"]:
            concat_supplier_key = order["ConcatNMBLPY"]
            mapped_supplier_code = supplier_code_mapping.get(concat_supplier_key)
            if mapped_supplier_code:
                buyer_supplier_orders[branch_code][mapped_supplier_code].append(order)

# Generate payloads
indent_payloads = []
csv_data = []

for branch_code, suppliers in buyer_supplier_orders.items():
    for supplier_code, items in suppliers.items():
        
        # âœ… Correctly group by delivery date INSIDE this loop
        delivery_date_groups = defaultdict(list)
        for item in items:
            raw_date = item["DELIVERY DATE"]
            try:
                parsed_date = datetime.strptime(raw_date, "%d-%m-%Y")  # Adjust format as needed
            except ValueError:
                parsed_date = datetime.strptime(raw_date, "%Y-%m-%d")  # Fallback
            normalized_date = parsed_date.strftime("%Y-%m-%d")
            delivery_date_groups[normalized_date].append(item)

        # âœ… Now iterate over each delivery date's group
        for delivery_date, date_items in delivery_date_groups.items():
            indent_payload = {
                "branchCode": branch_code,
                "branchName": date_items[0]["BRANCH NAME"],
                "supplierCode": supplier_code,
                "items": [],
                "status": "Draft",
                "sourceInfo": {"sourceIndentOrder": "Automated Order"},
                "deliveryDate": delivery_date,
                "notes": "Generated by script."
            }

            for item in date_items:
                sku_code = str(item["SUPPLIER SKU"])
                lookup_key = (sku_code, supplier_code)
                item_details = supplier_lookup.get(lookup_key, {})

                item_data = {
                    "skuCode": sku_code,
                    "itemName": item_details.get("name", item["ITEM NAME"]),
                    "measuringUnit": item_details.get("measuringUnit", item["MEASURING UNIT"]),
                    "quantity": item["QUANTITY"]
                }

                indent_payload["items"].append(item_data)

                # Add to CSV
                csv_data.append([
                    branch_code,
                    item["BRANCH NAME"],
                    supplier_code,
                    sku_code,
                    item_data["itemName"],
                    item_data["measuringUnit"],
                    item_data["quantity"],
                    delivery_date
                ])

            indent_payloads.append(indent_payload)

# Save JSON
json_filename = os.path.join(indent_folder, f"indent_payloads_{current_date}.json")
with open(json_filename, "w", encoding="utf-8") as f:
    json.dump(indent_payloads, f, indent=4, ensure_ascii=False)

print(f"ðŸŽ¯ JSON file '{json_filename}' generated successfully with {len(indent_payloads)} payloads!")

# Save CSV
csv_filename = os.path.join(indent_csv_folder, f"indent_payloads_{current_date}.csv")
with open(csv_filename, "w", newline="", encoding="utf-8") as f:
    writer = csv.writer(f)
    writer.writerow(["Branch Code", "Branch Name", "Supplier Code", "SKU Code", "Item Name", "Measuring Unit", "Quantity", "Delivery Date"])
    writer.writerows(csv_data)

print(f"ðŸ“„ CSV file '{csv_filename}' generated successfully with {len(csv_data)} rows!")
